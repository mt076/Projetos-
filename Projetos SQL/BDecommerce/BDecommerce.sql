CREATE TABLE ITEM_PEDIDO (
    NUM_PEDIDO INT NOT NULL,
    COD_ITEM_PEDIDO INT NOT NULL,
    COD_SERVICO INT NOT NULL,
    QTD_SEVICO numeric(2) NOT NULL,
    VLR_TOTAL_ITEM numeric(10,2) NOT NULL
);

CREATE TABLE PEDIDO (
    NUM_PEDIDO INT NOT NULL,
    COD_CLIENTE INT NOT NULL,
    DAT_PEDIDO date NOT NULL,
    VLR_TOTAL_PEDIDO numeric(10,2) NULL,
    COD_FORMA_PAGAMENTO INT NOT NULL
);

CREATE TABLE SERVICO (
    COD_SERVICO INT NOT NULL,
    COD_FORNECEDOR INT NOT NULL,
    DSC_SERVICO VARCHAR (500) NOT NULL,
    TIP_SERVICO VARCHAR(50) NOT NULL,
    VLR_SERVICO numeric(10,2) NOT NULL
);

CREATE TABLE FORNECEDOR (
    COD_FORNECEDOR INT NOT NULL,
    NOM_FORNECEDOR VARCHAR(100) NOT NULL,
    NUM_CNPJ numeric (15) NULL,
    DSC_ENDERECO VARCHAR(1000) NOT NULL,
    NUM_TELEFONE numeric (14) NOT NULL
);

CREATE TABLE FORMA_PAGAMENTO (
    COD_FORMA_PAGAMENTO INT NOT NULL,
    DSC_FORMA_PAGAMENTO VARCHAR(100) NOT NULL
);

CREATE TABLE CLIENTE (
    COD_CLIENTE INT NOT NULL,
    NOM_CLIENTE VARCHAR(100) NOT NULL,
    NUM_CPF_CNPJ numeric(15) NULL,
    DSC_ENDERECO_COBRANCA VARCHAR(1000) NOT NULL,
    NUM_TELEFONE numeric(14) NOT NULL
);

-- Inserindo dados na tabela ITEM_PEDIDO
INSERT ALL
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (1, 101, 201, 2, 500.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (2, 102, 202, 1, 300.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (3, 103, 203, 3, 900.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (4, 104, 204, 2, 700.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (5, 105, 205, 1, 400.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (6, 106, 206, 5, 1500.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (7, 107, 207, 2, 600.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (8, 108, 208, 4, 800.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (9, 109, 209, 1, 200.00)
    INTO ITEM_PEDIDO (NUM_PEDIDO, COD_ITEM_PEDIDO, COD_SERVICO, QTD_SEVICO, VLR_TOTAL_ITEM) VALUES (10, 110, 210, 3, 750.00)
SELECT 1 FROM DUAL;

-- Inserindo dados na tabela PEDIDO
INSERT ALL
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (1, 1, TO_DATE('2025-01-01', 'YYYY-MM-DD'), 500.00, 1)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (2, 2, TO_DATE('2025-01-02', 'YYYY-MM-DD'), 300.00, 2)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (3, 3, TO_DATE('2025-01-03', 'YYYY-MM-DD'), 900.00, 3)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (4, 4, TO_DATE('2025-01-04', 'YYYY-MM-DD'), 700.00, 1)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (5, 5, TO_DATE('2025-01-05', 'YYYY-MM-DD'), 400.00, 2)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (6, 6, TO_DATE('2025-01-06', 'YYYY-MM-DD'), 1500.00, 3)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (7, 7, TO_DATE('2025-01-07', 'YYYY-MM-DD'), 600.00, 1)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (8, 8, TO_DATE('2025-01-08', 'YYYY-MM-DD'), 800.00, 2)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (9, 9, TO_DATE('2025-01-09', 'YYYY-MM-DD'), 200.00, 3)
    INTO PEDIDO (NUM_PEDIDO, COD_CLIENTE, DAT_PEDIDO, VLR_TOTAL_PEDIDO, COD_FORMA_PAGAMENTO) VALUES (10, 10, TO_DATE('2025-01-10', 'YYYY-MM-DD'), 750.00, 1)
SELECT 1 FROM DUAL;

-- Inserindo dados na tabela SERVICO
INSERT ALL
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (201, 1, 'Corte de Cabelo', 'Beleza', 250.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (202, 2, 'Manutenção de Computador', 'Informática', 300.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (203, 3, 'Lavagem de Carro', 'Automotivo', 100.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (204, 4, 'Consultoria Jurídica', 'Serviço', 500.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (205, 5, 'Aula de Matemática', 'Educação', 200.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (206, 6, 'Entrega de Documentos', 'Logística', 150.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (207, 7, 'Design Gráfico', 'Design', 400.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (208, 8, 'Revisão de Texto', 'Linguística', 100.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (209, 9, 'Limpeza de Casa', 'Doméstico', 300.00)
    INTO SERVICO (COD_SERVICO, COD_FORNECEDOR, DSC_SERVICO, TIP_SERVICO, VLR_SERVICO) VALUES (210, 10, 'Organização de Eventos', 'Eventos', 1000.00)
SELECT 1 FROM DUAL;

-- Inserindo dados na tabela FORNECEDOR
INSERT ALL
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (1, 'Beleza Suprema', 12345678901234, 'Rua A, 123', 11987654321)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (2, 'Tech Fix', 23456789012345, 'Rua B, 456', 11998765432)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (3, 'Car Wash Pro', 34567890123456, 'Rua C, 789', 11976543210)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (4, 'Advocacia Legal', 45678901234567, 'Rua D, 101', 11912345678)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (5, 'Aulas Top', 56789012345678, 'Rua E, 202', 11923456789)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (6, 'Logística Fácil', 67890123456789, 'Rua F, 303', 11934567890)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (7, 'Arte Design', 78901234567890, 'Rua G, 404', 11945678901)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (8, 'Textos Revisados', 89012345678901, 'Rua H, 505', 11956789012)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (9, 'Casa Limpa', 90123456789012, 'Rua I, 606', 11967890123)
    INTO FORNECEDOR (COD_FORNECEDOR, NOM_FORNECEDOR, NUM_CNPJ, DSC_ENDERECO, NUM_TELEFONE) VALUES (10, 'Eventos Perfeitos', 12345678901234, 'Rua J, 707', 11978901234)
SELECT 1 FROM DUAL;

-- Inserindo dados na tabela FORMA_PAGAMENTO
INSERT ALL
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (1, 'Cartão de Crédito')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (2, 'Boleto Bancário')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (3, 'Transferência Bancária')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (4, 'Pix')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (5, 'Cartão de Débito')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (6, 'Dinheiro')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (7, 'Cheque')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (8, 'Vale Refeição')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (9, 'Vale Alimentação')
    INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (10, 'Crédito Loja')
SELECT 1 FROM DUAL;

-- Inserindo dados na tabela CLIENTE
INSERT ALL
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (1, 'Ana Silva', 11122233344, 'Rua X, 100', 11999887766)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (2, 'Carlos Souza', 22233344455, 'Rua Y, 200', 11988776655)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (3, 'Beatriz Oliveira', 33344455566, 'Rua Z, 300', 11977665544)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (4, 'Daniel Costa', 44455566677, 'Rua A, 400', 11966554433)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (5, 'Elena Martins', 55566677788, 'Rua B, 500', 11955443322)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (6, 'Fernando Lima', 66677788899, 'Rua C, 600', 11944332211)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (7, 'Gabriela Rocha', 77788899900, 'Rua D, 700', 11933221100)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (8, 'Henrique Alves', 88899900011, 'Rua E, 800', 11922110099)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (9, 'Isabela Ferreira', 99900011122, 'Rua F, 900', 11911009988)
    INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE) VALUES (10, 'João Mendes', 00011122233, 'Rua G, 1000', 11900998877)
SELECT 1 FROM DUAL;


--O UNION ALL é usado para combinar os resultados das duas tabelas (CLIENTE e FORNECEDOR).
--O DISTINCT garante que as informações sejam únicas.
--O ORDER BY ordena o resultado alfabeticamente pela coluna "Nome da Pessoa".
SELECT DISTINCT
    NOM_CLIENTE AS "Nome da Pessoa",
    DSC_ENDERECO_COBRANCA AS "Endereço",
    NUM_TELEFONE AS "Telefone"
FROM CLIENTE
UNION ALL
SELECT DISTINCT
    NOM_FORNECEDOR AS "Nome da Pessoa",
    DSC_ENDERECO AS "Endereço",
    NUM_TELEFONE AS "Telefone"
FROM FORNECEDOR
ORDER BY "Nome da Pessoa";


--PASSO 1: Adiciona a coluna IND_STATUS sem a restrição NOT NULL.
ALTER TABLE FORMA_PAGAMENTO
ADD IND_STATUS CHAR(1);
--PASSO 2: Atualiza as linhas existentes para definir o valor 'D' na nova coluna.
UPDATE FORMA_PAGAMENTO
SET IND_STATUS = 'D';
--PASSO 3: Altera a coluna para NOT NULL, agora que todas as linhas existentes possuem um valor válido.
ALTER TABLE FORMA_PAGAMENTO
MODIFY (IND_STATUS CHAR(1) DEFAULT 'D');


--Verifique se existem valores nulos na coluna VLR_TOTAL_PEDIDO:
SELECT COUNT(*) AS quantidade_nulos
FROM PEDIDO
WHERE VLR_TOTAL_PEDIDO IS NULL;


--ALTER TABLE para modificar a coluna para NOT NULL
ALTER TABLE PEDIDO
MODIFY VLR_TOTAL_PEDIDO numeric(10,2) NOT NULL;


--Alias (AS) foi usado para dar os labels corretos às colunas, como solicitado:
--"NOME COMPLETO" para NOM_CLIENTE.
--"CPF_CNPJ" para NUM_CPF_CNPJ.
--"DSC_ENDERECO_COBRANCA" para DSC_ENDERECO_COBRANCA.
--"CELULAR" para NUM_TELEFONE.
SELECT 
    COD_CLIENTE, 
    NOM_CLIENTE AS "NOME COMPLETO", 
    NUM_CPF_CNPJ AS "CPF_CNPJ", 
    DSC_ENDERECO_COBRANCA AS "DSC_ENDERECO_COBRANCA", 
    NUM_TELEFONE AS "CELULAR"
FROM CLIENTE
ORDER BY NOM_CLIENTE;


--A empresa que te contratou solicitou que você explique o motivo pelo 
--qual a query abaixo (para retornar os pedidos dos clientes) está dando 
--erro de execução, e reescreva-a de forma que ela possa ser executada 
--com sucesso.

--Motivo do erro:
--O erro ocorre porque no Oracle não existe uma função YEAR() para extrair o ano 
--de uma data. Em vez disso, é necessário usar a função EXTRACT ou manipular 
--diretamente o formato da data.
SELECT 
    C.NOM_CLIENTE AS "NOME DO CLIENTE", 
    P.NUM_PEDIDO AS PEDIDO, 
    P.DAT_PEDIDO AS "DATA DO PEDIDO", 
    P.VLR_TOTAL_PEDIDO
FROM 
    CLIENTE C
JOIN 
    PEDIDO P ON C.COD_CLIENTE = P.COD_CLIENTE
WHERE 
    EXTRACT(YEAR FROM P.DAT_PEDIDO) = 2020
ORDER BY 
    "NOME DO CLIENTE";


--A empresa solicitou que você providencie uma query para listar todos os 
--serviços e os respectivos fornecedores, ordenando essa lista 
--alfabeticamente pelo nome do fornecedor e descendentemente pelo 
--valor do serviço. A lista deve possuir as colunas NOM_FORNECEDOR, 
--NUM_TELEFONE, DSC_SERVICO, TIP_SERVICO e VLR_SERVICO. Foi 
--solicitado também que a query use o padrão ANSI-92 para relacionar as 
--tabelas.
SELECT 
    F.NOM_FORNECEDOR, 
    F.NUM_TELEFONE, 
    S.DSC_SERVICO, 
    S.TIP_SERVICO, 
    S.VLR_SERVICO
FROM 
    SERVICO S
JOIN 
    FORNECEDOR F ON S.COD_FORNECEDOR = F.COD_FORNECEDOR
ORDER BY 
    F.NOM_FORNECEDOR ASC, 
    S.VLR_SERVICO DESC;
    
--Relacionamento entre SERVICO e FORNECEDOR:
--A junção é feita entre SERVICO e FORNECEDOR através de S.COD_FORNECEDOR = F.COD_FORNECEDOR, que relaciona o serviço com o fornecedor.
--Ordenação:
--A consulta ordena os resultados alfabeticamente pelo nome do fornecedor (F.NOM_FORNECEDOR) e, em seguida, pelo valor do serviço (S.VLR_SERVICO) de forma decrescente.
SELECT 
    S.DSC_SERVICO, 
    S.TIP_SERVICO, 
    S.VLR_SERVICO, 
    F.NOM_FORNECEDOR
FROM 
    SERVICO S, 
    FORNECEDOR F
WHERE 
    S.COD_FORNECEDOR = F.COD_FORNECEDOR
ORDER BY 
    F.NOM_FORNECEDOR ASC, S.VLR_SERVICO DESC;


--Essa query deve calcular corretamente o percentual de clientes cadastrados sem
--CPF/CNPJ. Se precisar de mais alguma coisa, estou à disposição!
SELECT 
    (SELECT COUNT(*) FROM CLIENTE WHERE NUM_CPF_CNPJ IS NULL) / 
    (SELECT COUNT(*) FROM CLIENTE) * 100 AS "Percentual de Clientes sem Informação de Documento"
FROM DUAL;

--otimizar a atualização das colunas string para maiúsculo com os seguintes comandos
UPDATE CLIENTE SET 
    NOM_CLIENTE = UPPER(NOM_CLIENTE), 
    DSC_ENDERECO_COBRANCA = UPPER(DSC_ENDERECO_COBRANCA);

UPDATE FORNECEDOR SET 
    NOM_FORNECEDOR = UPPER(NOM_FORNECEDOR), 
    DSC_ENDERECO = UPPER(DSC_ENDERECO);

UPDATE SERVICO SET 
    DSC_SERVICO = UPPER(DSC_SERVICO), 
    TIP_SERVICO = UPPER(TIP_SERVICO);

UPDATE FORMA_PAGAMENTO SET 
    DSC_FORMA_PAGAMENTO = UPPER(DSC_FORMA_PAGAMENTO);
    
    
--A query usa uma junção (LEFT JOIN) entre as tabelas PEDIDO e ITEM_PEDIDO para identificar pedidos com valores nulos ou incorretos.
--A condição HAVING verifica se o VLR_TOTAL_PEDIDO é nulo ou diferente da soma dos valores na coluna VLR_TOTAL_ITEM para o mesmo pedido.
SELECT 
    P.NUM_PEDIDO, 
    P.DAT_PEDIDO, 
    P.VLR_TOTAL_PEDIDO
FROM 
    PEDIDO P
LEFT JOIN 
    ITEM_PEDIDO IP ON P.NUM_PEDIDO = IP.NUM_PEDIDO
GROUP BY 
    P.NUM_PEDIDO, 
    P.DAT_PEDIDO, 
    P.VLR_TOTAL_PEDIDO
HAVING 
    P.VLR_TOTAL_PEDIDO IS NULL 
    OR P.VLR_TOTAL_PEDIDO <> SUM(IP.VLR_TOTAL_ITEM);


--Seleciona os fornecedores (NOM_FORNECEDOR).
--Calcula o mês do pedido (MES) usando a função TO_CHAR para extrair o mês da data do pedido.
--Soma a quantidade de serviços (TOTAL DE ITENS) e o valor total dos itens (VALOR TOTAL) para cada fornecedor e mês.
--Faz o join das tabelas:
--ORNECEDOR com SERVICO usando COD_FORNECEDOR.
--SERVICO com ITEM_PEDIDO usando COD_SERVICO.
--ITEM_PEDIDO com PEDIDO usando NUM_PEDIDO.
--Filtra os pedidos para o ano corrente usando EXTRACT(YEAR FROM P.DAT_PEDIDO) = EXTRACT(YEAR FROM SYSDATE).
--Agrupa os resultados por fornecedor e mês para obter os totais por período.
--Ordena os resultados pelo nome do fornecedor.
SELECT 
    F.NOM_FORNECEDOR, 
    TO_CHAR(P.DAT_PEDIDO, 'MM') AS MES,
    SUM(I.QTD_SEVICO) AS "TOTAL DE ITENS", 
    SUM(I.VLR_TOTAL_ITEM) AS "VALOR TOTAL"
FROM 
    FORNECEDOR F
LEFT JOIN 
    SERVICO S ON F.COD_FORNECEDOR = S.COD_FORNECEDOR
LEFT JOIN 
    ITEM_PEDIDO I ON S.COD_SERVICO = I.COD_SERVICO
LEFT JOIN 
    PEDIDO P ON I.NUM_PEDIDO = P.NUM_PEDIDO
WHERE 
    EXTRACT(YEAR FROM P.DAT_PEDIDO) = EXTRACT(YEAR FROM SYSDATE)
GROUP BY 
    F.NOM_FORNECEDOR, TO_CHAR(P.DAT_PEDIDO, 'MM')
ORDER BY 
    F.NOM_FORNECEDOR;
    
    
--Clientes que não fizeram pedidos
SELECT 
    C.NOM_CLIENTE, 
    C.NUM_TELEFONE
FROM 
    CLIENTE C
LEFT JOIN 
    PEDIDO P ON C.COD_CLIENTE = P.COD_CLIENTE
WHERE 
    P.COD_CLIENTE IS NULL
ORDER BY 
    C.NOM_CLIENTE;


--Essa query lista clientes que fizeram pedidos. Uma forma mais otimizada, sem subconsulta correlacionada, seria
SELECT 
    C.NOM_CLIENTE, 
    C.NUM_TELEFONE
FROM 
    CLIENTE C
WHERE 
    EXISTS (
        SELECT 
            P.COD_CLIENTE 
        FROM 
            PEDIDO P 
        WHERE 
            P.COD_CLIENTE = C.COD_CLIENTE
    )
ORDER BY 
    C.NOM_CLIENTE;


--Excluir Clientes que não fizeram pedidos
DELETE FROM 
    CLIENTE 
WHERE 
    COD_CLIENTE NOT IN (SELECT COD_CLIENTE FROM PEDIDO);
    
--Gerar Cópia da Tabela ITEM_PEDIDO
CREATE TABLE TMP_ITEM_PEDIDO AS 
SELECT * FROM ITEM_PEDIDO;


--Essas instruções garantem que os dados serão inseridos corretamente, independentemente da ordem das colunas na tabela
INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO)
VALUES (1, 'CARTÃO DE DÉBITO');
INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO)
VALUES (2, 'CARTÃO DE CRÉDITO');
INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO)
VALUES (3, 'BOLETO');
INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO)
VALUES (4, 'FATURA');
INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO)
VALUES (5, 'TRANSFERÊNCIA BANCÁRIA');

--Esta versão do código usa cursores para realizar os SELECTs dentro de um bloco
--PL/SQL e também utiliza variáveis para armazenar os resultados. Além disso, 
--DBMS_OUTPUT.PUT_LINE é usado para imprimir os resultados das contagens de transações.

-- Declarando variáveis para armazenar os resultados dos SELECTs
DECLARE
    v_primeira_contagem NUMBER;
    v_segunda_contagem NUMBER;
    v_cursor SYS_REFCURSOR;
BEGIN
    -- Ponto de salvamento para Transacao1
    SAVEPOINT Transacao1;
    INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (1, 'CARTÃO DE DÉBITO');
    -- Ponto de salvamento para Transacao2
    SAVEPOINT Transacao2;
    INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (2, 'CARTÃO DE CRÉDITO');
    -- Realizando o SELECT durante a transação
    OPEN v_cursor FOR SELECT * FROM FORMA_PAGAMENTO ORDER BY 1;
    FETCH v_cursor INTO v_primeira_contagem; -- Note que este FETCH é apenas uma forma de consumir o cursor
    -- Confirma Transacao2
    COMMIT;
    INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (3, 'BOLETO');
    -- Contagem de transações
    v_primeira_contagem := 1;
    DBMS_OUTPUT.PUT_LINE('PRIMEIRA CONTAGEM: ' || v_primeira_contagem);
    OPEN v_cursor FOR SELECT * FROM FORMA_PAGAMENTO ORDER BY DSC_FORMA_PAGAMENTO;
    FETCH v_cursor INTO v_primeira_contagem;
    -- Confirma Transacao1
    COMMIT;
    INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (4, 'FATURA');
    -- Contagem de transações
    v_segunda_contagem := 0;
    DBMS_OUTPUT.PUT_LINE('SEGUNDA CONTAGEM: ' || v_segunda_contagem);
    OPEN v_cursor FOR SELECT * FROM FORMA_PAGAMENTO ORDER BY COD_FORMA_PAGAMENTO;
    FETCH v_cursor INTO v_segunda_contagem;
EXCEPTION
    WHEN OTHERS THEN
        -- Reverter Transacao1 em caso de erro
        ROLLBACK TO Transacao1;
END;


--Inserimos os primeiros registros (199 e 299).
--Realizamos um COMMIT para confirmar essas inserções.
--Inserimos o terceiro registro (399).
--Realizamos um ROLLBACK para reverter a inserção do terceiro registro (399).
--Realizamos um COMMIT para finalizar a transação anterior.
--Inserimos o quarto registro (499).
--Realizamos um COMMIT final para confirmar a inserção do registro (499).

BEGIN
    -- Inserir o primeiro registro
    INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (199, 'CARTÃO DE DÉBITO');
    -- Inserir o segundo registro
    INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (299, 'CARTÃO DE CRÉDITO');
    -- Commitar a transação
    COMMIT;
    -- Inserir o terceiro registro
    INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (399, 'BOLETO');
    -- Realizar o rollback das últimas operações não commitadas
    ROLLBACK;
    -- Commitar novamente para finalizar a transação anterior
    COMMIT;
    -- Inserir o quarto registro
    INSERT INTO FORMA_PAGAMENTO (COD_FORMA_PAGAMENTO, DSC_FORMA_PAGAMENTO) VALUES (499, 'FATURA');
    -- Commitar a transação final
    COMMIT;
END;


--Criação de uma Procedure para inserir dados na tabela CLIENTE
--Código DDL para a criação da procedure SP_INSERE_CLIENTE
CREATE OR REPLACE PROCEDURE SP_INSERE_CLIENTE (
    p_cod_cliente IN CLIENTE.COD_CLIENTE%TYPE,
    p_nom_cliente IN CLIENTE.NOM_CLIENTE%TYPE,
    p_num_cpf_cnpj IN CLIENTE.NUM_CPF_CNPJ%TYPE,
    p_dsc_endereco_cobranca IN CLIENTE.DSC_ENDERECO_COBRANCA%TYPE,
    p_num_telefone IN CLIENTE.NUM_TELEFONE%TYPE
) AS
BEGIN
    INSERT INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, NUM_CPF_CNPJ, DSC_ENDERECO_COBRANCA, NUM_TELEFONE)
    VALUES (p_cod_cliente, p_nom_cliente, p_num_cpf_cnpj, p_dsc_endereco_cobranca, p_num_telefone);
END;
--execução da procedure
BEGIN
    SP_INSERE_CLIENTE(11, 'Maria Silva', 12345678900, 'Rua Exemplo, 123', 11987654321);
END;



SELECT DISTINCT NOM_CLIENTE AS "Nome da Pessoa", 
                DSC_ENDERECO_COBRANCA AS "Endereço",  
                NUM_TELEFONE AS "Telefone" 
FROM CLIENTE 
UNION  
SELECT DISTINCT NOM_FORNECEDOR AS "Nome da Pessoa", 
                DSC_ENDERECO AS "Endereço", 
                NUM_TELEFONE AS "Telefone" 
FROM FORNECEDOR 
ORDER BY "Nome da Pessoa" ASC;



